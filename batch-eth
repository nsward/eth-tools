#!/usr/bin/env bash

# Usage - must have seth installed, sends ETH to the list of `to` addresses below
# export ETH_KEYSTORE
# export SETH_CHAIN or ETH_RPC_URL
# ./batch-eth --from 0x0879e430Ba0B5CF9C22933B4b53d88F7Ebb49Bc7 --value $(seth --to-wei 1 eth) 

# ******
# addresses to send eth to
# ******
declare -a dst_addresses=(
    0xb3a079bfbaf89f7fa16ad9b3b677dd8db681d089  # Timmy
    0x5d84feb1376c4078af6bd306e07e2efdffdf5db4  # Tommy
    0x2fb69c063604f38473ad372aa55540ed388df628 # Jimmy
)


# show help / usage info
function display_help() {
    echo -e "\nUsage:   batch-eth --value <value> --from <from> [--gas <gas amount>] [--gas-price <gas price>]"
    echo -e "\n   or:   batch-eth -V <value> -F <from> [-G <gas amount>] [-P <gas price>]\n"
}

# show info on the batch send we are going to make
# network, from address, balance of from address, and # of recipients
function display_info() {
    echo -e "\nETH batch send\n"
    echo -e "\033[1mseth chain:       $(seth chain)\033[0m\n"
    echo "from:             $BATCH_FROM"
    echo "balance:          $(seth --from-wei $(seth balance $BATCH_FROM)) eth"
    echo "# of recipients:  ${#dst_addresses[@]}"
    echo -e "\n"
}

# validate user input. Note that a lot of validation is done by seth. We
# just want to make sure that we aren't accidentally using previously
# exported defaults
function do_checks() {
    # from address should be 42 characters
    if [ ${#BATCH_FROM} != 42 ]; then
        echo -e "\nInvalid from address" 
        display_help
        exit 1
    fi

    # requre value not empty
    if [ -z $BATCH_VALUE ]; then
        echo -e "\nNo value input"
        display_help
        exit 1
    fi
}

# Ask user to confirm action
function confirm() {
    # call with a prompt string or use a default
    read -r -p "${1:-Are you sure? [y/N]} " response
    response=${response,,}    # tolower
    if [[ "$response" =~ ^(yes|y)$ ]]
    then
        true
    else
        false  
    fi
}

function get_password() {
    read -sp "Ethereum account passphrase (not echoed, press Enter to skip): " response
    if [ ! -z $response ]; then
        export TEMP_FILE=./temp_file
        if [ -f $TEMP_FILE ]; then 
            echo -e "\nERROR: temp_file exists"
            exit 1
        fi
        echo $response >> $TEMP_FILE
        trap 'rm -f $TEMP_FILE' EXIT    # always delete temp file on exit
        export ETH_PASSWORD=$TEMP_FILE 
    fi
    echo -e "\n"
}

# grab user input
while [[ $1 ]]; do
    case $1 in
        -V|--value)     shift; export BATCH_VALUE=$1;;
        -F|--from)      shift; export BATCH_FROM=$1;;
        help|--help)    display_help; exit 1;;
        *) echo "$1 is not a recognized flag!"; exit 1
    esac; shift
done

do_checks       # validate user input
display_info    # display info on the transactions we are about to send
get_password    # ask for keystore pasword (optional)

# send a transaction to each address in dst_addresses array
for dst_address in ${dst_addresses[@]}
do
    echo "sending $(seth --from-wei $BATCH_VALUE) eth to $dst_address"
    echo "--------------------------------"

    # Comment out line below to send txs without asking for confirmation
    # [[ -z "$TEMP_FILE" ]] || confirm "Approve this transaction? (y/N)" &&
    seth send $dst_address --value $BATCH_VALUE --from $BATCH_FROM
    echo
done

echo "Batch sends complete."
echo "balance of $BATCH_FROM: $(seth --from-wei $(seth balance $BATCH_FROM)) eth"
